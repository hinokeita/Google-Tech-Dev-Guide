この課題にむけてあなたがすることは、ハングマンのゲームをするプログラムを書くことです。
課題、ハングマンは2つの目的を果たします。
まず、プログラムはあなたにいくつかの練習を与えるように設計されており、
文字列やファイルを操作するプログラムを書きます。 次に、プログラムを拡張することによって
第9章のグラフィカルツールを使うと、一度に複数のクラスを扱うことができます。

ユーザーがハングマンをプレイすると、コンピュータは最初に内蔵のリストからランダムに秘密の単語を選択します。
プログラムはそれからダッシュの列を出力します - 秘密の単語の中の各文字につき一つ - そして
ユーザーに手紙を推測するように要求します。 ユーザーがその単語の中にある文字を推測すると、その単語は再表示されます。
正しく推測された文字とともに、その文字のすべてのインスタンスが正しい位置に表示されます。
文字が単語に含まれていない場合、ユーザーは誤った推測で告発されます。
ユーザーは、（1）単語内のすべての文字を正しく推測するまで、文字を推測し続けます。
または（2）ユーザーが誤った推測を8回行った。 ゲームのプレイを説明する2つのサンプル実行
次のページの図1に示されています。

それが子供たちによって演じられるとき、本当の魅力（やや病的な魅力、私は思う）
ハングマンは、間違った推測が進化している絵を描くことによって記録されるという事実から来ます
ユーザーが足場にぶら下がっている。 それぞれの誤った推測に対して、棒人間の体の新しい部分 - 最初の
頭、次に体、そしてそれぞれの腕、それぞれの脚、そして最後にそれぞれの足が、足場に追加されます。
ぶら下げは完了です。 たとえば、以下の3つの図は、最初の図の後の図を示しています。
間違った推測（頭だけ）、3番目（頭、体、そして左腕）
負けゲームの終わり：

ハングマンを演じるプログラムを書くために、あなたは3つのプログラムであなたのプログラムを設計しテストするべきです。
最初の部分は、グラフィックを使わずにゲームのインタラクティブ部分を機能させることです。
すべて、そして秘密の単語の固定セットを使って。 第二部は別のクラスを構築することから成ります
足場図を維持します。 最後の部分はあなたが秘密の供給されたバージョンを交換することを要求します
ファイルから単語を読む単語リスト。 この配布資料の残りの部分では、これら3つの部分について説明します。

パート1  - コンソールベースのゲームをプレイする
この課題の最初の部分では、あなたの仕事はユーザーとの対話を処理するプログラムを書くことです。
ゲームの構成要素 - グラフィック表示以外のすべて。問題を解決するために、あなたのプログラム
できること：
•秘密の単語として使用するランダムな単語を選択してください。説明したように、その単語は単語リストから選択されます。
次の段落で。
•ユーザーの部分的に推測された単語を追跡します。これは一連のダッシュで始まり、
正しい文字が推測されるように更新されました。
•基本的な制御構造を実装し、詳細を管理します（ユーザーに手紙を推測するよう依頼し、
残っている推測の数を追跡し、様々なメッセージをプリントアウトし、ゲームの終わりを検出する。
など）。
あなたの現在の知識を超えている唯一の操作はからの単語のリストを表すことです
あなたはランダムに単語を選ぶことができます。割り当ての最初の2つの部分については、単純に
少数の単語リストを提供するHangmanLexiconという名前のクラスを使用してください。
それはあなたがあなたのプログラムをテストすることを可能にするでしょう。 （辞書は辞書と非常によく似ていますが、そうではありません。
必然的に定義を含むので、リストを提供するクラスにとってより適切な名前になります。
与えられたクラスの実装は、
残りの割り当てをコーディングできるようにするための一時的な方法。パートIIIでは、あなたは交換します
データファイルから単語のリストを読み取る定義が用意されています。
実装するのに十分な機能を提供する一時的な実装を作成する戦略
プログラムの残りの部分はプログラミングの一般的な手法です。そのような一時的な実装は
通常スタブと呼ばれます。この課題では、スタータープロジェクトにスタブ実装が付属しています。
次のページの図2に示すHangmanLexiconクラス。このクラスには2つの一般公開
メソッド：レキシコン内の単語数を返すgetWordCount（）、およびそれを取得するgetWord（i）
インデックスiの単語を返します。 Javaの他のすべてのインデックスと同様に、値iは0から次の値より1小さい値までです。
言葉の数。

HangmanLexiconクラスのこの実装を使用したゲームはすぐになるでしょう
利用可能な単語が10個しかないため、面白くありません。それでも、それはあなたが残りを開発することを可能にするでしょう
その後、戻ってきて、この部分を改善してください。
パートIは、第8章で開発した方法を使用した文字列操作の問題です。
図1はゲームの基本的な操作を説明するのに十分なはずですが、以下の点が考えられます。
いくつかの問題を明確にするのに役立ちます。
•runメソッドの最初に、新しいHangmanLexiconを作成してそれを
インスタンス変数。ユーザーが複数のゲームをプレイできるようにプログラムを拡張すると、
HangmanLexiconは、ゲームを繰り返し再生するループの外側で実行する必要があります。
この操作は、ゲームごとではなく1回実行されます。
•すべての文字が大文字でも小文字でも大文字でもユーザーの推測を受け入れる必要があります。
秘密の言葉は大文字で書かれています。
•ユーザーが1文字以外のものを推測した場合、プログラムはユーザーに次のことを伝えます。
推測は違法であり、新しい推測を受け入れます。
 -  4  -
•ユーザーが正しい文字を複数回推測した場合、プログラムは単純に何もしないでください。
2回目の間違った手紙を推測することは、別の間違った推測としてカウントされるべきです。 （いずれの場合にも、
これらの解釈は状況を処理する最も簡単な方法です、そして、あなたのプログラムはおそらくそうするでしょう
たとえあなたがこれらの事件について詳細に考えていなくても正しいことです。）
パートIIに進む前に、パートIを終了するのを忘れないでください。パートIIは間違いなくもっと楽しいですが、それは不可欠です
扱いやすい段階で大規模なプログラムを開発する。
パートII  - グラフィックの追加
パートIIでは、あなたの仕事は単にあなたが既に書いたプログラムを拡張して、それが今もそれを保持するようにすることです。
ハングマンのグラフィック表示を追跡します。あなたは自分の中に物事を盛り上げたいと思うかもしれませんが
拡張機能、推測を使い果たした不幸なユーザーのための最終的な絵の単純版
このようになります：

このスタブは、以前にHangmanLexiconで示したものとは多少異なります。そのスタブは実際には
たとえそれがクラスの完全な実装が実際に行うことのほんの一部であったとしても、何かをしました
行う。このスタブは、画像のパラメータを定義する名前付き定数をいくつか宣言していますが、そうではありません。
実際にはまだ使っています。 HangmanCanvasのスタブ実装における3つのメソッド -  reset、
displayWord、およびnoteIncorrectGuess  - 絶対に何もしません。しかし、この戦略は
プログラミングでは一般的です。クラスが存在し、メソッドをエクスポートしているという事実は、あなたが呼び出すことができることを意味します
実装が完了する前であっても、コンソールベースのHangmanクラスからのメソッドです。
 -  6  -
パートIIを始めるときに最初にすべきことは、新しいHangmanCanvasを正確に作成することです。
それがあなたに与えられた何もしない形式 - そしてそれをプログラムウィンドウの隣にインストールする
コンソールHangmanクラス自体はConsoleProgramのインスタンスです。
ACMライブラリのスタートアップコードは、ウィンドウ全体にIOConsoleをインストールして、スペース全体を埋めます。
次の作業は、プログラムウィンドウにHangmanCanvasを追加することです。もっと学ぶ
CS 106Aの終わりに向かってこの種の操作をどのように行うかについてですが、このために必要なコード
部分は非常に単純です。まず、ハングマンプログラムのインスタンス変数のセクションで、あなたはする必要があります
次のように書いてキャンバスのインスタンス変数を宣言する
